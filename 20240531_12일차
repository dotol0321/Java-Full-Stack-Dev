2024.05.31 (금)

# 날짜 데이터형 ============================================= 찾아보기
- 사용하는 포맷이 다름 (ex. 한국 : 년월일 / 타국 : 일월년)
- 국가별 시차가 다름

# 2회차 시험
package test;

public class App {

	/****************************************************************
	 * 문제) AppController 클래스에 있는 5단계의 메소드 기능을 넣고 요청한 동작이 되도록 코드를 작성하시오.
	 * 단, 각 단계에서 데이터를 제어하시오. (예시 : Scanner를 이용하여 데이터 입력방식도 가능)
	 *
	 * 1단계 : 테이블 정의서를 보고 생성하시오.
	 *
	 * 2단계 : 사용자 정보를 테이블에 추가하시오.
	 *  -> 이름		이메일		 비밀번호	 		탈퇴여부
	 *  -> 홍길동	hong@email.com	 1234			NO
	 *  -> 유관순	yu@email.com	 5678			NO
	 *
	 * 3단계 : 아래의 사용자 데이터를 출력하시오.
	 *  -> 홍길동
	 *
	 * 4단계 : 아래의 사용자 데이터의 번호를 입력 받아 이메일과 비밀번호를 수정하시오.
	 *  -> 유관순 사용자 수정
	 *  -> 이메일 : yuyu@email.com
	 *  -> 비밀번호 : 1212
	 *
	 * 5단계 : 삭제할 데이터의 번호를 입력 받아 삭제하시오.
	 *  -> 유관순 사용자 : 탈퇴여부 (YES)로 변경
	 ***************************************************************/

	// 현재 로컬에 설치 되어 있는 데이터베이스 접속 정보를 입력하세요.
	private final static String URL = "jdbc:mariadb://localhost:3306/edu";
	private final static String USER = "root";
	private final static String PASSWORD = "1234";
	/****************************************************************/

	public static void main(String[] args) {
		new AppController().시작(URL, USER, PASSWORD);
	}

}

package test;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class AppController {
	
	private Scanner scan;
	private String name;
	private DBConnection db;
	private String sql;
	
	public AppController() {
		this.scan = new Scanner(System.in);
		this.db = new DBConnection();
	}

	/****************************************************************/
	// 1단계 테이블 생성하기
	private void 테이블생성(Connection conn) {
		sql = "create table User (no int, name varchar(100), email varchar(200), pwd varchar(100), del boolean)"; // DDL 추가
		System.out.println("테이블 생성 SQL문 확인 : " + sql);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.		
		db.테이블생성(conn, sql);
	}
	
	// 2단계 생성된 테이블에 데이터 입력하기
	private void 입력하기(Connection conn) {
		sql = "insert into User value (?, ?, ?, ?, ?)"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		DbTable data = new DbTable();
		List list = new ArrayList<DbTable>();
		data.setNo(1);
		data.setName("홍길동");
		data.setEmail("hong@email.com");
		data.setPwd("1234");
		data.setDel(false);
		list.add(data);
		
		data = new DbTable();
		data.setNo(2);
		data.setName("유관순");
		data.setEmail("yu@email.com");
		data.setPwd("5678");
		data.setDel(false);
		list.add(data);
		
		/*****************************************
		 *  Scanner 사용시 추가
		 *****************************************/
		for(int i=0; i<list.size(); i++) {
			data = (DbTable) list.get(i);
			System.out.println(data);
			// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
			db.데이터입력하기(conn, sql, data);
		}
	}
	
	// 3단계 생성된 데이터 가져오기 >> 목록 출력 시 화면출력() 메소드를 사용하시오.
	private void 가져오기(Connection conn) {
		sql = "select * from User where no = 1"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		화면출력(db.데이터가져오기(conn, sql));
	}
	
	// 4단계 생성된 데이터 수정하기
	private void 수정하기(Connection conn) {
		sql = "update User set email = ?, pwd = ? where no = ?"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		DbTable data = new DbTable();
		/*****************************************
		 *  Scanner 사용시 추가
		 *****************************************/
		data.setEmail("yuyu@email.com");
		data.setPwd("1212");
		data.setNo(2);
		
		System.out.println(data);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
		db.데이터수정하기(conn, sql, data);
	}
	
	// 5단계 생성된 데이터 삭제하기
	private void 삭제하기(Connection conn) {
		sql = "update User set del = ? where no = ?"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		DbTable data = new DbTable();

		/*****************************************
		 *  Scanner 사용시 추가
		 *****************************************/
		data.setDel(true);
		data.setNo(2);

		System.out.println(data);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
		db.데이터삭제하기(conn, sql, data);
	}
	/****************************************************************/
	
	private void 사용자() {
		System.out.println("당신은 누구인가요?");
		this.name = scan.nextLine();
		System.out.println(this.name + "님 환영합니다.");
	}
	
	private void 종료() {
		System.out.println(this.name + "님 다음에 또 찾아주세요.");
		scan.close();
	}
	
	private void 화면출력(List<DbTable> list) {
		for(int i = 0; i < list.size(); i++) {
			DbTable data = list.get(i);
			System.out.println(data);
		}
	}
	
	private boolean 디비접속() {
		boolean result = false;
		boolean key = true;
		System.out.println("데이터베이스에 연결하시겠습니까?(Y/N)");
		while(key) {
			switch (scan.nextLine()) {
				case "Y":
				case "y":
					result = true;
				case "N":
				case "n":
					key = false;
					break;
				default:
					System.out.println("잘못 입력하셨습니다.");
					break;
			}
		}
		return result;
	}
	
	public void 시작(String URL, String USER, String PASSWORD) {
		사용자();
		if(디비접속()) {
			try {
				Connection conn = db.openDB(URL, USER, PASSWORD);
				if(conn != null) {
					//테이블생성(conn);					
					boolean key = true;
					while(key) {
						System.out.println("어떤 기능을 실행하시겠습니까?(C입력/R읽기/U수정/D삭제/E종료");
						switch (scan.nextLine()) {
							case "C": 
							case "c":
								입력하기(conn);
								break;
							case "R": 
							case "r":
								가져오기(conn);
								break;
							case "U": 
							case "u":
								수정하기(conn);
								break;
							case "D": 
							case "d":
								삭제하기(conn);
								break;
							case "E": 
							case "e":
								key = false;
								break;
							default:
								System.out.println("잘못된 입력입니다. 다시 기능을 입력해주세요.");
						}
					}
					conn.close();
					종료();
				} else {
					System.out.println("데이터 접속 정보를 확인해 주세요.");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			종료();
		}
	}

}
package test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DBConnection {

	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	public Connection openDB(String URL, String USER, String PASSWORD) {
		try {
			Class.forName("org.mariadb.jdbc.Driver");
			System.out.println("JDBC Connection Open!");
			return DriverManager.getConnection(URL, USER, PASSWORD);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public boolean 테이블생성(Connection conn, String sql) {
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.execute();
			pstmt.close();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public List<DbTable> 데이터가져오기(Connection conn, String sql) {
		List<DbTable> list = new ArrayList<DbTable>();
		DbTable data;
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while(rs.next()){
				data = new DbTable();

				// 데이터를 매핑하시오.
				data.setNo(rs.getInt("no"));
				data.setName(rs.getString("name"));
				data.setEmail(rs.getString("email"));
				data.setPwd(rs.getString("pwd"));
				data.setDel(rs.getBoolean("del"));
						
				list.add(data);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	public boolean 데이터입력하기(Connection conn, String sql, DbTable data) {
		try {
			pstmt = conn.prepareStatement(sql);

			// 데이터를 매핑하시오.
			pstmt.setInt(1, data.getNo());
			pstmt.setString(2, data.getName());
			pstmt.setString(3, data.getEmail());
			pstmt.setString(4, data.getPwd());
			pstmt.setBoolean(5, data.isDel());

			int state = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			if(state == 1) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public boolean 데이터수정하기(Connection conn, String sql, DbTable data) {
		try {
			pstmt = conn.prepareStatement(sql);

			// 데이터를 매핑하시오.
			pstmt.setString(1, data.getEmail());
			pstmt.setString(2, data.getPwd());
			pstmt.setInt(3, data.getNo());

			int state = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			if(state == 1) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;

	}

	public boolean 데이터삭제하기(Connection conn, String sql, DbTable data) {
		try {
			pstmt = conn.prepareStatement(sql);

			// 데이터를 매핑하시오.
			pstmt.setBoolean(1, data.isDel());
			pstmt.setInt(2, data.getNo());

			int state = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			if(state == 1) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;

	}

}

package test;

public class DbTable {

	// 테이블 정의서를 보고 필드(변수)를 선언하시오.
	private int no;
	private String name;
	private String email;
	private String pwd;
	private boolean del;
	
	public int getNo() {
		return no;
	}
	public void setNo(int no) {
		this.no = no;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPwd() {
		return pwd;
	}
	public void setPwd(String pwd) {
		this.pwd = pwd;
	}
	public boolean isDel() {
		return del;
	}
	public void setDel(boolean del) {
		this.del = del;
	}
	@Override
	public String toString() {
		return "DbTable [no=" + no + ", name=" + name + ", email=" + email + ", pwd=" + pwd + ", del=" + del + "]";
	}
	
}

